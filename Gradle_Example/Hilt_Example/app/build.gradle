plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}
// Call a script plugin from the local file system
apply from: 'outputFilesHandling.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "learning.android.hilt"
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        resConfigs "el" // There is no other language than the default one
        resConfigs "hdpi" // Comment this on and off and keep an eye at the size of the executable
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors{
        simple{
            applicationIdSuffix ".simple"
            manifestPlaceholders = [ appLabel: "Simple Hilt Example"]
        }

        advanced{
            applicationIdSuffix ".advanced"
            manifestPlaceholders = [ appLabel: "Advanced Hilt Example"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding  true
    }

    lintOptions {
        // Returns whether lint should be quiet (for example, not write informational messages such as paths to report files written)
        quiet true

        // Whether lint should set the exit code of the process if errors are found
        abortOnError false

        // Returns whether lint will only check for errors (ignoring warnings)
        ignoreWarnings true

        // Returns whether lint should check for fatal errors during release builds. Default is true.
        // If issues with severity "fatal" are found, the release build is aborted.
        checkReleaseBuilds false
    }

//    splits {
//        density {
//            enable true
//            include 'mdpi', 'hdpi'
//            compatibleScreens 'normal', 'large'
//        }
//    }
}

hilt {
    enableExperimentalClasspathAggregation = true
}

kapt {
    correctErrorTypes true
}

// this task is stored in "other" Gradle folder
// and "a1" in the name makes my task to be in top of the others
task a1SampleTask {
    // See the output of the run to see the order of the printed messages
    doFirst {
        println('A1 -> Execution phase. Starting...')
    }

    println('A1 -> Configuration phase')

    doLast {
        println('A1 -> Execution phase. Ended!')
    }
}
task a2SampleTask {
    doFirst {
        println('A2 -> Execution phase. Starting...')
    }

    println('A2 -> Configuration phase')

    doLast {
        println('A2 -> Execution phase. Ended!')
    }
}
// No matter the "mustRunAfter" or "dependsOn" the configuration of a1SampleTask and
// a2SampleTask always runs (the same happens for every single task in gradle build files).

// When you run a2SampleTask alone, it does not run the a1SampleTask.
// If you want to run a2SampleTask and a1SampleTask together it runs first the a1SampleTask.
a2SampleTask.mustRunAfter(a1SampleTask) // -> No need to co exist with dependsOn

// When you run a2SampleTask it always run a1SampleTask before.
a2SampleTask.dependsOn(a1SampleTask) // -> No need to co exist with mustRunAfter

// Dynamically created task
android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "a1Run ${variant.name}", dependsOn: variant.install) {
            doLast {
                exec {
                    executable = 'C:\\Users\\v.tsapalos\\AppData\\Local\\Android\\Sdk\\platform-tools\\adb'
                    args = ['shell', 'am', 'start', '-n', "${variant.applicationId}/learning.android.hilt.ui.MainActivity"]
                }
            }
        }
    }
}

// A simple hook into Android plugin.
// This task can be found as custom plugin by me in the project as "outputFilesHandling.gradle".
//android.applicationVariants.all { variant ->
//    variant.outputs.all {output ->
//        def builtType = variant.buildType.name
//        def versionName = variant.versionName
//        def versionCode = variant.versionCode
//        def flavor = variant.flavorName
//        outputFileName = "app-${flavor}-${builtType}-${versionName}-${versionCode}.apk"
//    }
//}

dependencies {

    implementation project(path: ':domain')
    implementation project(path: ':data')

    // For simple flavor implement balloon library like a file
    simpleImplementation fileTree(dir: 'libs', include: ['*.aar'])
    // For advanced flavor implement balloon library like a repo.
    // Needs allprojects.repositories.flatDir is central build.gradle file.
    advancedImplementation (name:"balloon", ext:"aar")

    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.fragment:fragment-ktx:1.3.3'

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    implementation "io.reactivex.rxjava3:rxjava:3.0.0"

    implementation 'com.android.support:multidex:1.0.3'

    testImplementation 'com.google.dagger:hilt-android-testing:2.35.1'
    kaptTest 'com.google.dagger:hilt-compiler:2.35.1'

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.35.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.35.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}